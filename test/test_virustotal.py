#!/usr/bin/env python3
import requests, json, sys, re

if len(sys.argv) != 3:
  print("usage: %s <token_account_virustotal> <sha256_malicious_file>" % sys.argv[0])
  sys.exit(-1)

counters = {"P":dict(), "MT":dict(), "MF":dict(), "VC":dict(), "INF":dict()}

api_key=sys.argv[1]
elem_sha2 =sys.argv[2]
base_url="https://www.virustotal.com/api/v3"

dirs = "./jsons"
fp = open("%s/vendor.json" % dirs, "r")
fp_regex = open("%s/regex.json" % dirs, "r")
naming = json.load(fp)
naming = { v['Vendor']:v for v in naming }
regex = json.load(fp_regex)
regex = { v['id']:v for v in regex}

fp.close()
fp_regex.close()


r = requests.get("{}/files/{}".format(base_url, elem_sha2), headers={"x-apikey":api_key})
data = r.json()

for k,v in list(data['data']['attributes']['last_analysis_results'].items()) :
  if "malicious" in v['category'] :
    engine = v['engine_name']
    to_match = v['result']

    if engine in naming :
      found = -1

      for id_reg in naming[engine]['Id-regex'] :
        reg = regex[id_reg]['regex']
        compose = regex[id_reg]['compose']

        rets = re.findall(reg, to_match)
        if rets :
          rets = rets[0]

          try :

            rets2 = re.findall(reg, compose)[0]
            if isinstance(rets2, str):
              rets2 = [rets2]

            for idx, elem in enumerate(rets2) :
              cc = counters[elem]
              elem2 = rets[idx].strip()
              if elem2 not in cc :
                cc.update({elem2:0})
              cc.update({elem2: cc[elem2]+1})
              found = id_reg
        
          except :
            print("Execption on engine:{} regex:{} compose:{} to_match:{} rets:{}".format(engine, reg, compose, to_match, rets))
            print(" example:{} , last elem was:{}".format(re.findall(reg, compose)[0], elem))
            sys.exit(1)

          if found >= 0:
            break

      if found < 0:
        print("WARN: {} - wrong parsing - |regex:{} |string_to_match:{}".format(engine, reg, to_match))

    else :
      print("[x] {} - Not present on table.. example entry:{}".format(engine, to_match))

print("\n## printing common names counter  .. example entry:MT:  \"word_0\":counter_0 \"word_1\":counter_1  ...\n")
for k,d in list(counters.items()) :
  print("{}: ".format(k), end=" ")
  for i,(k2,v) in enumerate( list(d.items())) :
    if (i % 8) == 0 :
      print("\n"+" " * (len(k)), end=" ")
    print("\"{}\":{},".format(k2, v), end= " ")
  print("\n")


